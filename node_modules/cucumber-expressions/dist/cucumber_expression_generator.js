'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _transform_matcher = require('./transform_matcher');

var _transform_matcher2 = _interopRequireDefault(_transform_matcher);

var _generated_expression = require('./generated_expression');

var _generated_expression2 = _interopRequireDefault(_generated_expression);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CucumberExpressionGenerator = function () {
  function CucumberExpressionGenerator(transformLookup) {
    _classCallCheck(this, CucumberExpressionGenerator);

    this._transformLookup = transformLookup;
  }

  _createClass(CucumberExpressionGenerator, [{
    key: 'generateExpression',
    value: function generateExpression(text, typed) {
      var argumentNames = [];
      var transformMatchers = this._createTransformMatchers(text);
      var transforms = [];

      var expression = "";
      var argCounter = 0;
      var pos = 0;

      while (true) {
        // eslint-disable-line no-constant-condition
        var matchingTransformMatchers = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = transformMatchers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var transformMatcher = _step.value;

            var advancedTransformMatcher = transformMatcher.advanceTo(pos);
            if (advancedTransformMatcher.find) {
              matchingTransformMatchers.push(advancedTransformMatcher);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (matchingTransformMatchers.length > 0) {
          var argumentName = 'arg' + ++argCounter;
          argumentNames.push(argumentName);
          matchingTransformMatchers = matchingTransformMatchers.sort(_transform_matcher2.default.compare);
          var bestTransformMatcher = matchingTransformMatchers[0];
          transforms.push(bestTransformMatcher.transform);

          expression += text.slice(pos, bestTransformMatcher.start);
          expression += '{' + argumentName;

          if (typed) {
            expression += ':' + bestTransformMatcher.transform.typeName;
          }
          expression += "}";
          pos = bestTransformMatcher.start + bestTransformMatcher.group.length;
        } else {
          break;
        }

        if (pos >= text.length) {
          break;
        }
      }

      expression += text.slice(pos);
      return new _generated_expression2.default(expression, argumentNames, transforms);
    }
  }, {
    key: '_createTransformMatchers',
    value: function _createTransformMatchers(text) {
      var transformMatchers = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this._transformLookup.transforms[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var transform = _step2.value;

          transformMatchers = transformMatchers.concat(this._createTransformMatchers2(transform, text));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return transformMatchers;
    }
  }, {
    key: '_createTransformMatchers2',
    value: function _createTransformMatchers2(transform, text) {
      var result = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = transform.captureGroupRegexps[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var captureGroupRegexp = _step3.value;

          result.push(new _transform_matcher2.default(transform, captureGroupRegexp, text));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return result;
    }
  }]);

  return CucumberExpressionGenerator;
}();

exports.default = CucumberExpressionGenerator;