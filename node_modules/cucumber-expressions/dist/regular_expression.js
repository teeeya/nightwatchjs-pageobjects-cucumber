'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _match_arguments = require('./match_arguments');

var _match_arguments2 = _interopRequireDefault(_match_arguments);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RegularExpression = function () {
  function RegularExpression(regexp, types, transformLookup) {
    _classCallCheck(this, RegularExpression);

    this._regexp = regexp;
    this._transforms = [];

    var CAPTURE_GROUP_PATTERN = /\(([^(]+)\)/g;

    var typeIndex = 0;
    var match = void 0;
    while ((match = CAPTURE_GROUP_PATTERN.exec(regexp.source)) !== null) {
      var captureGroupPattern = match[1];
      var type = types.length <= typeIndex ? null : types[typeIndex++];

      var transform = void 0;
      if (type) {
        transform = transformLookup.lookupByType(type);
      }
      if (!transform) {
        transform = transformLookup.lookupByCaptureGroupRegexp(captureGroupPattern);
      }
      if (!transform) {
        transform = transformLookup.createAnonymousLookup(function (s) {
          return s;
        });
      }
      this._transforms.push(transform);
    }
  }

  _createClass(RegularExpression, [{
    key: 'match',
    value: function match(text) {
      return (0, _match_arguments2.default)(this._regexp, text, this._transforms);
    }
  }, {
    key: 'getSource',
    value: function getSource() {
      return this._regexp.toString();
    }
  }]);

  return RegularExpression;
}();

exports.default = RegularExpression;