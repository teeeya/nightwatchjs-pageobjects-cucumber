"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _transform = require("./transform");

var _transform2 = _interopRequireDefault(_transform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TransformLookup = function () {
  function TransformLookup() {
    _classCallCheck(this, TransformLookup);

    this._transformsByTypeName = new Map();
    this._transformsByCaptureGroupRegexp = new Map();
    this._transformsByConstructorName = new Map();

    var FIXNUM_REGEXPS = ["-?\\d+", "\\d+"];
    var FLOATING_POINT_REGEXPS = ["-?\\d*\\.?\\d+"];

    this.addTransform(new _transform2.default('int', Number, FIXNUM_REGEXPS, parseInt));
    this.addTransform(new _transform2.default('float', Number, FLOATING_POINT_REGEXPS, parseFloat));
  }

  _createClass(TransformLookup, [{
    key: "lookupByType",
    value: function lookupByType(type) {
      if (typeof type === 'function') {
        return this.lookupByFunction(type);
      } else if (typeof type === 'string') {
        return this.lookupByTypeName(type, false);
      } else {
        throw new Error("Type must be string or function, but was " + type + " of type " + (typeof type === "undefined" ? "undefined" : _typeof(type)));
      }
    }
  }, {
    key: "lookupByFunction",
    value: function lookupByFunction(fn) {
      var _this = this;

      if (fn.name) {
        var _ret = function () {
          var prefix = fn.name[0];
          var looksLikeConstructor = prefix.toUpperCase() === prefix;

          var transform = void 0;
          if (looksLikeConstructor) {
            transform = _this._transformsByConstructorName.get(fn.name);
          }
          if (!transform) {
            var factory = function factory(s) {
              if (looksLikeConstructor) {
                return new fn(s);
              } else {
                return fn(s);
              }
            };
            return {
              v: _this.createAnonymousLookup(factory)
            };
          } else {
            return {
              v: transform
            };
          }
        }();

        if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
      } else {
        return this.createAnonymousLookup(fn);
      }
    }
  }, {
    key: "lookupByTypeName",
    value: function lookupByTypeName(typeName, ignoreUnknownTypeName) {
      var transform = this._transformsByTypeName.get(typeName);
      if (!transform) {
        if (ignoreUnknownTypeName) {
          return null;
        } else {
          throw new Error("No transform for type name \"" + typeName + "\". Registered transforms: " + Object.keys(this._transformsByTypeName));
        }
      } else {
        return transform;
      }
    }
  }, {
    key: "lookupByCaptureGroupRegexp",
    value: function lookupByCaptureGroupRegexp(captureGroupRegexp) {
      return this._transformsByCaptureGroupRegexp.get(captureGroupRegexp);
    }
  }, {
    key: "createAnonymousLookup",
    value: function createAnonymousLookup(fn) {
      return new _transform2.default(null, null, [".+"], fn);
    }
  }, {
    key: "addTransform",
    value: function addTransform(transform) {
      this._transformsByConstructorName.set(transform.constructorFunction.name, transform);

      this._transformsByTypeName.set(transform.typeName, transform);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = transform.captureGroupRegexps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var captureGroupRegexp = _step.value;

          this._transformsByCaptureGroupRegexp.set(captureGroupRegexp, transform);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "transforms",
    get: function get() {
      return this._transformsByTypeName.values();
    }
  }]);

  return TransformLookup;
}();

exports.default = TransformLookup;